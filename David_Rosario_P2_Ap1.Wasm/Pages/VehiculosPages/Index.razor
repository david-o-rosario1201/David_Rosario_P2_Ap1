@page "/Vehiculos"
@inject NavigationManager navigation
@inject HttpClient httpClient

<PageTitle>Veh&iacute;culos</PageTitle>
<div class="container">
	<div class="card shadow-lg">
		<div class="card-header">
			<h3><strong>Veh&iacute;culos</strong></h3>
			<button type="button" class="btn btn-outline-primary" @onclick="IrACrear"><i class="bi bi-plus-circle" /> Crear</button>
		</div>
		<div class="card-body">
			@if(loading)
			{
				<div class="d-flex justify-content-center">
					<div class="spinner-border text-info">
					</div>
				</div>
			}
			else if(vehiculos.Count == 0)
			{
				<h1 class="miMensaje"><i class="bi bi-exclamation-triangle"/> No hay veh&iacute;culos creados</h1>
			}
			else
			{
				@*Filtro*@
				<div class="row mb-3">
					<div class="col-3">
						@*Filtro*@
						<label class="form-label" for="filtrarPor"><strong>Filtrar por:</strong></label>
						<InputSelect id="filtrarPor" class="form-select" @bind-Value="filtrarPor">
							<option value="1">Id</option>
							<option value="2">Fecha</option>
							<option value="3">Descripci&oacute;n</option>
						</InputSelect>
					</div>
					@*Datos*@
					<div class="col-3 d-flex align-items-end">
						@switch (filtrarPor)
						{
							case 1:
								<InputNumber class="form-control" @bind-Value="id"></InputNumber>
								break;

							case 2:
								<InputDate class="form-control" @bind-Value="fecha"></InputDate>
								break;

							case 3:
								<InputText class="form-control" @bind-Value="descripcion" placeholder="Ingrese una descripción"></InputText>
								break;
						}
					</div>
					<div class="col-auto d-flex align-items-end">
						<button type="button" class="btn btn-outline-primary" @onclick="Buscar"><i class="bi bi-search" /></button>
					</div>
					<div class="col-3 d-flex align-items-end">
						<button type="button" class="btn btn-outline-secondary" @onclick="Restablecer"><i class="bi bi-arrow-clockwise" /> Restablecer</button>
					</div>
				</div>
				
				@*Tabla*@
				<table class="table table-bordered miTabla">
					<thead>
						<tr>
							<th>Veh&iacute;culoId</th>
							<th>Fecha</th>
							<th>Descripci&oacute;n</th>
							<th>Costo</th>
							<th>Gasto</th>
							<th>Ver</th>
							<th>Editar</th>
							<th>Eliminar</th>
						</tr>
					</thead>
					<tbody>
						@foreach(var vehiculo in vehiculos)
						{
							<tr>
								<td>@vehiculo.VehiculoId</td>
								<td>@vehiculo.Fecha.ToShortDateString()</td>
								<td>@vehiculo.Descripcion</td>
								<td>@vehiculo.Costo.ToString("N2")</td>
								<td>@vehiculo.Gastos.ToString("N2")</td>
								<td><button type="button" class="btn btn-outline-info" @onclick="()=>IrAView(vehiculo.VehiculoId)"><i class="bi bi-eye" /></button></td>
								<td><button type="button" class="btn btn-outline-warning" @onclick="()=>IrAEditar(vehiculo.VehiculoId)"><i class="bi bi-pencil-square" /></button></td>
								<td><button type="button" class="btn btn-outline-danger" @onclick="()=>IrAEliminar(vehiculo.VehiculoId)"><i class="bi bi-trash3-fill" /></button></td>
							</tr>
						}
					</tbody>
				</table>
			}
		</div>
		<div class="card-footer">
			<p><strong>Cantidad de Veh&iacute;culos: </strong>@vehiculos.Count</p>
		</div>
	</div>
</div>
@mensaje

@code {
	public bool loading { get; set; } = true;
	public List<Vehiculos> vehiculos = new List<Vehiculos>();
	public int filtrarPor { get; set; }
	public int id { get; set; }
	public DateTime fecha { get; set; } = DateTime.Today;
	public string descripcion { get; set; }
	public string mensaje { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);

		vehiculos = await httpClient.GetFromJsonAsync<List<Vehiculos>>("api/Vehiculos");

		loading = false;

		if (vehiculos.Count > 0)
			StateHasChanged();
	}

	public async Task Buscar()
	{
		if (filtrarPor == 0)
		{
			mensaje = "Debe indicar por cual método desea filtrar";
			StateHasChanged();
		}

		switch(filtrarPor)
		{
			case 1:
				var buscarId = vehiculos.FirstOrDefault(v => v.VehiculoId == id);
				if (buscarId != null)
				{
					vehiculos.Clear();
					vehiculos.Add(buscarId);
				}
				else
					mensaje = "No se encontró el Id. Verifique que este llenando el campo correctamente.";
				break;

			case 2:
				var buscarFecha = vehiculos.Where(v => v.Fecha == fecha).ToList();
				if (buscarFecha.Count > 0)
					vehiculos = buscarFecha;
				else
					mensaje = "No se encontró nigún vehículo con esta fecha. Verifique que este llenando el campo correctamente.";
				break;

			case 3:
				var buscarDesc = vehiculos.Where(v => v.Descripcion == descripcion).ToList();
				if (buscarDesc.Count > 0)
					vehiculos = buscarDesc;
				else
					mensaje = "No se encontró nigún vehículo con esta descripción. Verifique que este llenando el campo correctamente.";
				break;
		}

		await LimpiarPantalla();
	}

	public async Task LimpiarPantalla()
	{
		await Task.Delay(2000);
		mensaje = string.Empty;
	}

	public async Task Restablecer()
	{
		vehiculos = await httpClient.GetFromJsonAsync<List<Vehiculos>>("api/Vehiculos");
	}


	public void IrACrear()
	{
		navigation.NavigateTo("/CreateVehiculos");
	}
	public void IrAView(int id)
	{
		navigation.NavigateTo($"/ViewVehiculos/vehiculoId={id}");
	}
	public void IrAEditar(int id)
	{
		navigation.NavigateTo($"/EditVehiculos/vehiculoId={id}");
	}
	public void IrAEliminar(int id)
	{
		navigation.NavigateTo($"/DeleteVehiculos/vehiculoId={id}");
	}
}
