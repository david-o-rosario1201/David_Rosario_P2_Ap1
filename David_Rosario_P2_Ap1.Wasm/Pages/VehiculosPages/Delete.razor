@page "/DeleteVehiculos"
@page "/DeleteVehiculos/vehiculoId={vehiculoId:int}"
@inject NavigationManager navigation
@inject HttpClient httpClient

<PageTitle>Eliminar Veh&iacute;culo</PageTitle>
<div class="container">
	<div class="card shadow-lg">
		<div class="card-header">
			<h3><strong>Eliminar Veh&iacute;culo</strong></h3>
		</div>
		<div class="card-body col-5">
			<h3><strong>¿Éstas seguro de que quieres eliminar a este veh&iacute;culo?</strong></h3>

			@*Datos*@
			<ul>
				<li><strong>VehiculoId: </strong>@vehiculo.VehiculoId</li>
				<li><strong>Fecha: </strong>@vehiculo.Fecha.ToShortDateString()</li>
				<li><strong>Descripción: </strong>@vehiculo.Descripcion</li>
				<li><strong>Costo: </strong>@vehiculo.Costo.ToString("N2")</li>
				<li><strong>Gastos: </strong>@vehiculo.Gastos.ToString("N2")</li>
			</ul>

			
		</div>
		
		<div class="card-body">
			<section>
				@*Tabla Detalles*@
				@if (vehiculo.VehiculosDetalles.Count > 0)
				{

					<h4><strong>Detalles:</strong></h4>

					<table class="table table-bordered miTabla">
						<thead>
							<tr>
								<th>AccesorioId</th>
								<th>Descripci&oacute;n</th>
								<th>Valor</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var detalle in vehiculo.VehiculosDetalles)
							{
								<tr>
									<td>@detalle.AccesorioId</td>
									<td>@ObtenerDescripcion(detalle.AccesorioId)</td>
									<td>@detalle.Valor.ToString("N2")</td>
								</tr>
							}
						</tbody>
					</table>
					<p><strong>Cantidad de Detalles: </strong>@vehiculo.VehiculosDetalles.Count</p>
				}
			</section>
		</div>	

		<div class="card-footer d-flex justify-content-center">
			<div class="px-2">
				<button type="button" class="btn btn-outline-dark" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Cancelar</button>
			</div>
			<button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><i class="bi bi-trash3-fill" /> Eliminar</button>
		</div>
	</div>
</div>
@mensaje

@code {
	[Parameter]
	public int vehiculoId { get; set; }
	public Vehiculos vehiculo { get; set; } = new Vehiculos();
	public List<Accesorios> accesorios = new List<Accesorios>();
	public int accesorioId { get; set; }
	public decimal valor { get; set; }
	public string mensaje { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);

		vehiculo = await httpClient.GetFromJsonAsync<Vehiculos>($"api/Vehiculos/{vehiculoId}");

		accesorios = await httpClient.GetFromJsonAsync<List<Accesorios>>("api/Accesorios");
	}

	public async Task Eliminar()
	{
		var response = await httpClient.DeleteAsync($"api/Vehiculos/{vehiculoId}");
		if (response.IsSuccessStatusCode)
		{
			mensaje = "Vehículo eliminado con éxito";
			StateHasChanged();
			await Task.Delay(2000);
			Volver();
		}
		else
		{
			mensaje = "No se pudo eliminar el vehículo con éxito";
		}

		StateHasChanged();
	}

	public async Task AgregarDetalle()
	{
		if (accesorioId == 0)
		{
			mensaje = "Debe elegir un accesorioId";
		}

		else if (valor == 0)
		{
			mensaje = "Debe ingresar un valor";
		}

		else
		{
			var nuevoDetalle = new VehiculosDetalle() { AccesorioId = accesorioId, Valor = valor };
			vehiculo.VehiculosDetalles.Add(nuevoDetalle);
		}

		StateHasChanged();
	}

	public string ObtenerDescripcion(int id)
	{
		var descripcion = accesorios.FirstOrDefault(a => a.AccesorioId == id);
		return descripcion.Descripcion;
	}

	public void Volver()
	{
		navigation.NavigateTo("/Vehiculos");
	}
}
